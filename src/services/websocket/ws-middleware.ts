import { Middleware, MiddlewareAPI, Dispatch } from "@reduxjs/toolkit";
import { RootState, WsResponse } from "../../utils/types";
import { getCookie } from "../user/cookie-utils";

type WsConfig = {
  wsUrl: string;
  wsType: "feed" | "profile";
  withToken?: boolean;
};

export const createSocketMiddleware = (
  config: WsConfig
): Middleware<{}, RootState> => {
  return (store: MiddlewareAPI<Dispatch, RootState>) => {
    let socket: WebSocket | null = null;
    let isManuallyClosed = false;
    const { wsUrl, wsType, withToken = false } = config;
    const actions = {
      feed: {
        wsInit: "WS_FEED_INIT",
        onOpen: "WS_FEED_OPEN",
        onClose: "WS_FEED_CLOSE",
        onError: "WS_FEED_ERROR",
        onMessage: "WS_FEED_MESSAGE",
      },
      profile: {
        wsInit: "WS_PROFILE_INIT",
        onOpen: "WS_PROFILE_OPEN",
        onClose: "WS_PROFILE_CLOSE",
        onError: "WS_PROFILE_ERROR",
        onMessage: "WS_PROFILE_MESSAGE",
      },
    }[wsType];

    return (next) => (action: any) => {
      const { dispatch } = store;
      const accessToken = getCookie("accessToken");
      // console.log(`–ü–æ–ª—É—á–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è ${wsType}:`, action.type, "–¢–æ–∫–µ–Ω:", accessToken?.length);

      if (action.type === actions.wsInit) {
        console.log(`–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket –¥–ª—è ${wsType}`);
        if (!socket || socket.readyState === WebSocket.CLOSED) {
          if (withToken && !accessToken) {
            console.error(`–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –¥–ª—è ${wsType} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
            dispatch({
              type: actions.onError,
              payload: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            });
            return next(action);
          }
          const token = accessToken || "";
          // console.log(token)
          const url = withToken && token ? `${wsUrl}?token=${token}` : wsUrl;
          // console.log(`üß© –°–æ–∑–¥–∞–Ω–∏–µ WebSocket –¥–ª—è ${wsType}:`, url);
          socket = new WebSocket(url);
          isManuallyClosed = false;

          socket.onopen = () => {
            // console.log(`‚úÖ WebSocket –¥–ª—è ${wsType} –æ—Ç–∫—Ä—ã—Ç`);
            dispatch({ type: actions.onOpen });
          };

          socket.onerror = (event) => {
            // console.log(`‚ùå WebSocket –æ—à–∏–±–∫–∞ –¥–ª—è ${wsType}:`, event);
            if (!isManuallyClosed) {
              dispatch({
                type: actions.onError,
                payload: "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å WebSocket",
              });
            }
          };

          socket.onmessage = (event) => {
            try {
              const data: WsResponse = JSON.parse(event.data);
              // console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${wsType}:`, data);
              if (data.success && Array.isArray(data.orders)) {
                const validOrders = data.orders.filter(
                  (order) =>
                    typeof order.number === "number" &&
                    Array.isArray(order.ingredients) &&
                    order.ingredients.every((id) => typeof id === "string") &&
                    [
                      "created",
                      "pending",
                      "done",
                      "canceled",
                      "cancelled",
                    ].includes(order.status) &&
                    typeof order.name === "string" &&
                    typeof order.createdAt === "string" &&
                    typeof order.updatedAt === "string"
                );
                dispatch({
                  type: actions.onMessage,
                  payload: { ...data, orders: validOrders },
                });
              } else {
                dispatch({
                  type: actions.onError,
                  payload: data.message || "–û—à–∏–±–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏",
                });
              }
            } catch (e) {
              // console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è ${wsType}:`, e);
              dispatch({
                type: actions.onError,
                payload: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebSocket",
              });
            }
          };

          socket.onclose = (event) => {
            // console.log(`üì¥ WebSocket –¥–ª—è ${wsType} –∑–∞–∫—Ä—ã—Ç, –∫–æ–¥:`, event.code, "–ø—Ä–∏—á–∏–Ω–∞:", event.reason);
            socket = null;
            dispatch({ type: actions.onClose });
          };
        }
      }

      if (action.type === actions.onClose) {
        // console.log(`üîå –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket –¥–ª—è ${wsType} –≤—Ä—É—á–Ω—É—é`);
        if (socket && socket.readyState === WebSocket.CONNECTING) {
          isManuallyClosed = true;
        } else if (socket && socket.readyState === WebSocket.OPEN) {
          isManuallyClosed = true;
          socket.close();
        } else {
          // console.warn(`‚ö†Ô∏è –°–æ–∫–µ—Ç –¥–ª—è ${wsType} —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
        }
      }

      return next(action);
    };
  };
};
